apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: 'false'
    app.openshift.io/vcs-ref: ''
    app.openshift.io/vcs-uri: 'https://github.com/purefield-demo-team/ai-hackathon-starter.git'
    deployment.kubernetes.io/revision: '2'
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"react-frontend:latest","namespace":"ai-hackathon-starter-kit"},"fieldPath":"spec.template.spec.containers[?(@.name==\"react-frontend\")].image","paused":"false"}]'
    openshift.io/generated-by: OpenShiftWebConsole
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/part-of: {{ .Chart.Name }}
    app.openshift.io/runtime: nodejs
    app.openshift.io/runtime-version: 18-ubi8
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        deployment: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: 'image-registry.openshift-image-registry.svc:5000/{{ .Release.Namespace }}/{{ .Values.image.name }}:{{ .Values.image.tag }}'
          ports:
            - containerPort: {{ .Values.containerPort }}
              protocol: TCP
          env:
            - name: REACT_APP_STRAPI_API_URL
              value: "{{ .Values.strapi.url }}"
            - name: REACT_APP_KEYCLOAK_URL
              value: "{{ .Values.keycloak.url }}"
            - name: REACT_APP_OPENAI_API_KEY
              value: "{{ .Values.openaiapi.key }}"
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: {{ .Values.image.pullPolicy }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600